# alembic/env.py

from logging.config import fileConfig
import os

from sqlalchemy import engine_from_config, pool
from alembic import context

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))


# üîß Chargement des variables d'environnement
from dotenv import load_dotenv
load_dotenv()

# ‚¨áÔ∏è IMPORTATION DE VOS MOD√àLES SQLALCHEMY
# Adapte ce chemin selon l'emplacement r√©el de tes mod√®les
# ‚¨áÔ∏è IMPORTATION DE VOS MOD√àLES SQLALCHEMY
from app.database import Base    # Base vient bien de database.py
import app.models                # d√©clenche l‚Äôimport de tous les mod√®les


# üîß R√âCUP√âRATION DE LA CONFIGURATION ALEMBIC
config = context.config

# üõ†Ô∏è MISE √Ä JOUR DE L'URL DE CONNEXION AVEC CELLE DU .env
DATABASE_URL = os.getenv("DATABASE_URL")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL n'est pas d√©fini. V√©rifiez votre fichier .env.")

config.set_main_option("sqlalchemy.url", DATABASE_URL)

# üìÇ CONFIGURATION DU LOGGING
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# üìå D√âFINITION DU METADATA √Ä UTILISER POUR LES MIGRATIONS
# Cela permet √† Alembic de savoir quelles tables existent dans les mod√®les
target_metadata = Base.metadata

# üîÅ MIGRATIONS EN MODE OFFLINE
def run_migrations_offline() -> None:
    """Ex√©cuter les migrations sans se connecter √† la base."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()

# üîÅ MIGRATIONS EN MODE ONLINE
def run_migrations_online() -> None:
    """Ex√©cuter les migrations avec une connexion √† la base de donn√©es."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,  # Pour d√©tecter les changements de types de colonnes
        )

        with context.begin_transaction():
            context.run_migrations()

# üß† CHOISIR ENTRE OFFLINE OU ONLINE SELON LE CONTEXTE
if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
