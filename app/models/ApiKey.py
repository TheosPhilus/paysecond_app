import enum
from sqlalchemy import (
    Column, Text, Boolean, BigInteger, DateTime, Index, text, ForeignKey,
)
from sqlalchemy.dialects.postgresql import (
    UUID, INET, CIDR, ARRAY, ENUM as PGEnum
)
from app.database import Base

# ========================================================
# üîë 1. Python Enum pour api_key.status
# ========================================================
class ApiKeyStatus(enum.Enum):
    active  = "active"   # cl√© op√©rationnelle
    revoked = "revoked"  # cl√© r√©voqu√©e
    expired = "expired"  # cl√© expir√©e

# ========================================================
# üîë 2. Mod√®le SQLAlchemy pour la table "api_key"
# ========================================================
class ApiKey(Base):
    __tablename__ = "api_key"

    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        server_default=text("gen_random_uuid()")
    )  # [id] : Identifiant unique de la cl√© API, g√©n√©r√© automatiquement

    merchant_id = Column(
        UUID(as_uuid=True),
        ForeignKey("merchant.id", ondelete="CASCADE"),
        nullable=False
    )  # [merchant_id] : R√©f√©rence au commer√ßant (ON DELETE CASCADE)

    key_hash = Column(
        Text,
        nullable=False
    )  # [key_hash] : Hash s√©curis√© de la cl√© API

    description = Column(
        Text,
        nullable=True
    )  # [description] : Description de l‚Äôusage de la cl√©

    created_at = Column(
        DateTime(timezone=True),
        nullable=False,
        server_default=text("CURRENT_TIMESTAMP")
    )  # [created_at] : Date de cr√©ation de la cl√©

    last_used_at = Column(
        DateTime(timezone=True),
        nullable=True
    )  # [last_used_at] : Horodatage de la derni√®re utilisation

    expires_at = Column(
        DateTime(timezone=True),
        nullable=True
    )  # [expires_at] : Date d‚Äôexpiration de la cl√©

    status = Column(
        PGEnum(ApiKeyStatus, name="api_key_status", create_type=True),
        nullable=False,
        server_default=ApiKeyStatus.active.value
    )  # [status] : Statut de la cl√© (active, revoked, expired)

    permissions = Column(
        ARRAY(Text),
        nullable=False,
        server_default=text("ARRAY['read']::text[]")
    )  # [permissions] : Permissions accord√©es (tableau de cha√Ænes)

    ip_restrictions = Column(
        ARRAY(CIDR),
        nullable=True
    )  # [ip_restrictions] : Liste d‚ÄôIP ou de sous-r√©seaux autoris√©s

    plain_key = Column(
        Text,
        nullable=True
    )  # [plain_key] : Cl√© en clair (affich√©e une seule fois √† la cr√©ation)

    last_ip_used = Column(
        INET,
        nullable=True
    )  # [last_ip_used] : Derni√®re adresse IP ayant utilis√© la cl√©

    is_test_mode = Column(
        Boolean,
        nullable=False,
        server_default=text("FALSE")
    )  # [is_test_mode] : Indique si la cl√© est en mode test

    usage_count = Column(
        BigInteger,
        nullable=False,
        server_default=text("0")
    )  # [usage_count] : Nombre total d‚Äôutilisations de la cl√©

    __table_args__ = (
        Index("idx_api_key_merchant", "merchant_id"),             # index pour retrouver les cl√©s d‚Äôun commer√ßant
        Index("idx_api_key_status", "status"),                    # index sur le statut de la cl√©
        Index("idx_api_key_last_used_at", text("last_used_at DESC")),  # index tri√© sur last_used_at
        Index("idx_api_key_expires_at", "expires_at"),            # index sur la date d‚Äôexpiration
        Index("idx_api_key_usage_count", "usage_count"),          # index sur le compteur d‚Äôutilisation
    )
